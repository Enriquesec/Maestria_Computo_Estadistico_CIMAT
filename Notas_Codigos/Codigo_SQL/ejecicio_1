---
--- CASES
---
SELECT name || CASE type_id
                 WHEN 7  THEN ' is a drink'
                 WHEN 8  THEN ' is a fruit'
                 WHEN 9  THEN ' is junkfood'
                 WHEN 13 THEN ' is seafood'
                 ELSE NULL
               END description
FROM foods
WHERE description IS NOT NULL
ORDER BY name
LIMIT 10;


SELECT name,(SELECT 
               CASE
                 WHEN count(*) > 4
                   THEN 'Very High'
                 WHEN count(*) = 4
                   THEN 'High'
                 WHEN count(*) IN (2,3)
                   THEN 'Moderate'
                 ELSE 'Low'
               END
             FROM foods_episodes 
             WHERE food_id=f.id) frequency
FROM foods f
WHERE frequency LIKE '%High';


-- Manejo de NULL
SELECT * FROM foods WHERE foods.name=NULL;

SELECT * FROM foods WHERE foods.name IS NULL;

SELECT NULL=NULL;

SELECT NULL OR NULL;

SELECT NULL AND NULL;

SELECT NOT NULL;

SELECT 9E9 - 1E-9*NULL;

SELECT NULLIF(1,1);

SELECT NULLIF(1,2);

--NULL en operaciones
CREATE TABLE sales (product_id int, amount real, discount real);
INSERT INTO sales VALUES (1, 10.00, 1.00);
INSERT INTO sales VALUES (2, 10000.00, NULL);

SELECT * FROM sales;

SELECT SUM(amount-discount) FROM sales;

SELECT SUM(amount) from sales WHERE amount-discount > 100.00;

SELECT SUM(amount-COALESCE(discount,0)) FROM sales;

SELECT SUM(amount) from sales 
WHERE amount-COALESCE(discount,0) > 100.00;

--Modificaciones de tablas
INSERT INTO foods (name, type_id) VALUES ('Cinnamon Bobka', 1);

SELECT * FROM foods WHERE name='Cinnamon Bobka';

SELECT MAX(id) from foods;

SELECT last_insert_rowid();

INSERT INTO foods VALUES(NULL, 1, 'Blueberry Bobka');

SELECT * FROM foods WHERE name LIKE '%Bobka';

-- INSERT  on subquerys
INSERT INTO foods 
VALUES (NULL, 
       (SELECT id FROM food_types WHERE name='Bakery'), 
       'Blackberry Bobka');
	   
SELECT * FROM foods WHERE name LIKE '%Bobka';

-- Insercion Valores
INSERT INTO foods
SELECT last_insert_rowid()+1, type_id, name FROM foods
WHERE name='Chocolate Bobka';

SELECT * FROM foods WHERE name LIKE '%Bobka';

-- Insercion copia completa
CREATE TABLE foods2 (id int, type_id int, name text);
INSERT INTO foods2 SELECT * FROM foods;

SELECT COUNT(*) FROM foods2;

-- Insercion en resumen
CREATE TABLE foods2 AS SELECT * from foods;
SELECT COUNT(*) FROM foods2;

CREATE TEMP TABLE list AS
SELECT f.name Food, t.name Name,
(SELECT COUNT(episode_id)
FROM foods_episodes WHERE food_id=f.id) Episodes
FROM foods f, food_types t
WHERE f.type_id=t.id;

SELECT * FROM list;

--Insercion en Seguros
SELECT MAX(id) from foods;
INSERT INTO foods VALUES (416, 1, 'Chocolate Bobka');

--UPDATE
UPDATE foods SET name='CHOCOLATE BOBKA' 
WHERE name='Chocolate Bobka';

SELECT * FROM foods WHERE name LIKE 'CHOCOLATE%';

UPDATE foods SET id=11 where name='CHOCOLATE BOBKA';

--Integridad de entidades e integridad dominio

INSERT INTO contacts (name,phone) VALUES ('Jerry','UNKNOWN');

INSERT INTO contacts (name) VALUES ('Jerry');

INSERT INTO contacts (name,phone) VALUES ('Jerry', '555-1212');

SELECT * FROM contacts;

--Alias de Acceso
SELECT ROWID, OID,_ROWID_,id, name, phone FROM CONTACTS;

--Restricciones (Integridad entidad)
CREATE TABLE maxed_out(id INTEGER PRIMARY KEY AUTOINCREMENT, x text);
INSERT INTO maxed_out VALUES (9223372036854775807, 'last one');
SELECT * FROM sqlite_sequence;
INSERT INTO maxed_out VALUES (NULL, 'wont work');

DROP TABLE maxed_out;
CREATE TABLE maxed_out(id INTEGER PRIMARY KEY AUTOINCREMENT, x text);

INSERT INTO maxed_out values(10, 'works');
SELECT * FROM sqlite_sequence;

INSERT INTO maxed_out values(9, 'works');
SELECT * FROM sqlite_sequence;

INSERT INTO maxed_out VALUES (9, 'fails');

INSERT INTO maxed_out VALUES (NULL, 'should be 11');
SELECT * FROM maxed_out;
SELECT * FROM sqlite_sequence;

--Llaves de dos columnas
CREATE TABLE pkey(x text, y text, PRIMARY KEY(x,y));
INSERT INTO pkey VALUES ('x','y');
INSERT INTO pkey VALUES ('x','x');
SELECT ROWID, x, y FROM pkey;

INSERT INTO pkey VALUES ('x','x');

--Restricciones(integridad dominio)
INSERT INTO contacts (name) VALUES ('Jerry');
SELECT * FROM contacts;

--Tiempos
CREATE TABLE times ( id int,
  date NOT NULL DEFAULT CURRENT_DATE,
  time NOT NULL DEFAULT CURRENT_TIME,
  timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP );

INSERT INTO times (id) VALUES(1);
INSERT INTO times (id) VALUES(2);
SELECT * FROM times;

INSERT INTO contacts (phone) VALUES ('555-1212');

--Verificacion de rangos
CREATE TABLE contacts ( id INTEGER PRIMARY KEY,
                        name TEXT NOT NULL COLLATE NOCASE,
                        phone TEXT NOT NULL DEFAULT 'UNKNOWN',
                        UNIQUE (name,phone), 
                        CHECK(LENGTH(phone)>=7) );
								
CREATE TABLE foo( x integer, 
                  y integer CHECK(y>x),
                  z integer CHECK(z>ABS(y)) );
				  
INSERT into foo values (-2, -1, 2);
INSERT into foo values (-2, -1, 1);	

UPDATE foo SET y=-3 WHERE x=-3;			  

INSERT INTO contacts (name,phone) VALUES ('JERRY','555-1212');

--Tipos de datos en SQLlite
select typeof(3.14), typeof('3.14'), 
       typeof(314), typeof(x'3142'), typeof(NULL);
	   
DROP TABLE domain;
CREATE TABLE domain(x);
INSERT INTO domain VALUES (3.142);
INSERT INTO domain VALUES ('3.142');
INSERT INTO domain VALUES (3142);
INSERT INTO domain VALUES (x'3142');
INSERT INTO domain VALUES (NULL);
SELECT ROWID, x, typeof(x) FROM domain;	   
	   
SELECT 3 < 3.142, 3.142 < '3.142', '3.142' < x'3000', 
       x'3000' < x'3001';	   
	   
-- Tipo manifiesto
--MF1
CREATE TABLE foo( x integer, 
                  y text, 
                  z real );

INSERT INTO foo VALUES ('1', '1', '1');
SELECT ROWID, typeof(x), typeof(y), typeof(z) FROM foo;
SELECT * FROM foo;

INSERT INTO foo VALUES ('1', '1', '1');
INSERT INTO foo VALUES (1, 1.0, x'10');
SELECT ROWID, typeof(x), typeof(y), typeof(z) FROM foo;
SELECT * FROM foo;

--MF2 Strict type checking?
CREATE TABLE domain (x int, y varchar(2));
INSERT INTO domain VALUES ('pi', 3.14);
INSERT INTO domain VALUES (1, "pi");
INSERT INTO domain VALUES ('1', "pi");
SELECT ROWID, typeof(x), typeof(y) FROM domain;

CREATE TABLE foo(x, y, z);
INSERT INTO foo VALUES ('1', '1', '1');
INSERT INTO foo VALUES (1, 1.0, x'10');	   

--Afinidad de tipo
CREATE TABLE domain(i int, n numeric, t text, b blob);
INSERT INTO domain VALUES (3.142,3.142,3.142,3.142);
INSERT INTO domain VALUES ('3.142','3.142','3.142','3.142');
INSERT INTO domain VALUES (3142,3142,3142,3142);
INSERT INTO domain VALUES (x'3142',x'3142',x'3142',x'3142');
INSERT INTO domain VALUES (null,null,null,null);
SELECT ROWID,typeof(i),typeof(n),typeof(t),typeof(b) FROM domain;

--Interpretacion de orden
SELECT ROWID, b, typeof(b) FROM domain ORDER BY b;

SELECT ROWID, b, typeof(b), b<1000 FROM domain ORDER BY b;

--Comparaciones
select ROWID,b,typeof(i),i>'2.9' from domain ORDER BY b;

SELECT ROWID,b,typeof(i),i>'text' FROM domain ORDER BY b;

CREATE TABLE rule2(a int, b text);
insert into rule2 values(2,'1');
insert into rule2 values(2,'text');
select a, typeof(a),b,typeof(b), a>b from rule2;

--Casting
SELECT typeof(3.14), typeof(CAST(3.14 as TEXT));

--Strict typing
select typeof(3.14) = 'text';
select typeof(3.14) = 'integer';
select typeof(3.14) = 'real';
select typeof(3) = 'integer';
select typeof('3') = 'text';

create table domain (x integer CHECK(typeof(x)='integer'));
--INSERT INTO domain VALUES('1');
INSERT INTO domain VALUES(1.1);
INSERT INTO domain VALUES(1);
select x, typeof(x) from domain;

--Transacciones
BEGIN;
DELETE FROM foods;
ROLLBACK;
SELECT COUNT(*) FROM foods;


UPDATE foods SET id=800-id;



--COmparacion entre diferentes sensibilidades de error
CREATE TABLE test AS SELECT * FROM foods;
CREATE UNIQUE INDEX test_idx on test(id);
ALTER TABLE test ADD COLUMN modified text NOT NULL DEFAULT 'no';
SELECT COUNT(*) FROM test WHERE modified='no';

UPDATE OR FAIL test SET id=800-id, modified='yes';
SELECT COUNT(*) FROM test WHERE modified='yes';

DROP TABLE test;

CREATE TEMP TABLE cast(name text UNIQUE ON CONFLICT ROLLBACK);
INSERT INTO cast VALUES ('Jerry');
INSERT INTO cast VALUES ('Elaine');
INSERT INTO cast VALUES ('Kramer');

BEGIN;
INSERT INTO cast VALUES('Jerry');
COMMIT;

BEGIN;

INSERT OR REPLACE INTO cast VALUES('Jerry');

COMMIT;

--Vistas
SELECT f.name, ft.name, e.name
FROM foods f
INNER JOIN food_types ft on f.type_id=ft.id
INNER JOIN foods_episodes fe ON f.id=fe.food_id
INNER JOIN episodes e ON fe.episode_id=e.id;

CREATE VIEW details AS
SELECT f.name AS fd, ft.name AS tp, e.name AS ep, e.season as ssn
FROM foods f
INNER JOIN food_types ft on f.type_id=ft.id
INNER JOIN foods_episodes fe ON f.id=fe.food_id
INNER JOIN episodes e ON fe.episode_id=e.id;

SELECT fd as Food, ep as Episode 
FROM details WHERE ssn=7 AND tp like 'Drinks';

--indices
CREATE TABLE foo(a text, b text);
CREATE UNIQUE INDEX foo_idx on foo(a,b);
INSERT INTO foo VALUES ('unique', 'value');
INSERT INTO foo VALUES ('unique', 'value2');
INSERT INTO foo VALUES ('unique', 'value');

CREATE TABLE foo (a,b,c,d);
CREATE INDEX foo_idx on foo (a,b,c,d);
SELECT * FROM foo WHERE a=1 AND b=2 AND d=3;
SELECT * FROM foo WHERE a>1 AND b=2 AND c=3 AND d=4;
SELECT * FROM foo WHERE a=1 AND b>2 AND c=3 AND d=4;
